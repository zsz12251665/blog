var
	isprime:array[1..1000001]of integer;//We Mark H-primes with 1, H-semi-primes with 2 and the others with 0
	prime,queue:array[1..1000001]of longint;
	primesize,n,ans,i,j:longint;
begin
	for i:=1 to 250000 do//Initialize the isprime array
		isprime[4*i+1]:=1;
	primesize:=0;
	for i:=1 to 250000 do//The Sieve of Euler
		begin
			if isprime[4*i+1]=1 then
				begin
					prime[primesize]:=4*i+1;
					inc(primesize);
				end;
			for j:=1 to primesize do
				begin
					if (4*i+1)*prime[j]>1000001 then
						break;
					isprime[(4*i+1)*prime[j]]:=0;
					if (4*i+1) mod prime[j]=0 then
						break;
				end;
		end;
	read(n);//Read n and find the H-semi-primes below n
	while n<>0 do
		begin
			ans:=0;
			for i:=1 to primesize do
				if prime[i]>n/5 then
					break
				else
					for j:=1 to primesize do//Enumerate every pair of H-primes
						if prime[i]*prime[j]>n then
							break
						else
							if isprime[prime[i]*prime[j]]<>2 then
								begin
									isprime[prime[i]*prime[j]]:=2;
									inc(ans);
									queue[ans]:=prime[i]*prime[j];
								end;
			writeln(n,' ',ans);
			for i:=1 to ans do//The mark of H-semi-primes in the queue needs to be removed to avoid being not counted
				isprime[queue[i]]:=0;
			read(n);
		end;
end.

#include<cstdio>
using namespace std;
int isprime[1000002];//We Mark H-primes with 1, H-semi-primes with 2 and the others with 0
long prime[1000002],queue[1000002],primesize=0;
int main()
{
	for(long i=5;i<1000002;i+=4)//Initialize the isprime array
		isprime[i]=1;
	for(long i=5;i<1000002;i+=4)//The Sieve of Euler
	{
		if(isprime[i]==1)
			prime[primesize++]=i;
		for(long j=0;j<primesize && i*prime[j]<1000002;j++)
		{
			isprime[i*prime[j]]=0;
			if(i%prime[j]==0)
				break;
		}
	}
	long n;//Read n and find the H-semi-primes below n
	scanf("%ld",&n);
	while(n!=0)
	{
		long ans=0;
		for(long i=0;prime[i]<=n/5 && i<primesize;i++)//Enumerate every pair of H-primes
			for(long j=0;prime[i]*prime[j]<=n && j<primesize;j++)
				if(isprime[prime[i]*prime[j]]!=2)
				{
					isprime[prime[i]*prime[j]]=2;
					queue[ans++]=prime[i]*prime[j];
				}
		printf("%ld %ld\n",n,ans);
		for(long i=0;i<ans;i++)//The mark of H-semi-primes in the queue needs to be removed to avoid being not counted
			isprime[queue[i]]=0;
		scanf("%ld",&n);
	}
	return 0;
}

var
	ans:array[1..250000]of longint;//We use n to show the H-number 4n+1 and the maxinum of n is 250000
	isprime:array[1..250000]of integer;//We Mark H-primes with 0, H-semi-primes with 1 and the others with -1
	n,i,j,k:longint;
begin
	for i:=1 to 250000 do//Initialize the isprime array
		isprime[i]:=0;
	for i:=1 to 250000 do//Enumerate every pair of H-numbers
		for j:=1 to 250000 do
			begin
				k:=4*i*j+i+j;//(4i+1)(4j+1)=4(4i*j+i+j)+1
				if k>250000 then//To avoid overlimit
					break;
				if (isprime[i]=0) and (isprime[j]=0) then//Judge if it is a H-semi-prime
					isprime[k]:=1
				else
					isprime[k]:=-1;
			end;
	ans[1]:=isprime[1];//Count the number of H-semi-primes from 5 to 4n+1
	for i:=2 to 250000 do
		if isprime[i]=1 then
			ans[i]:=ans[i-1]+1
		else
			ans[i]:=ans[i-1];
	read(n);//Read n and print the answer as feedback
	while n<>0 do
		begin
			writeln(n,' ',ans[(n-1) div 4]);
			read(n);
		end;
end.

#include<cstdio>
using namespace std;
long ans[250001];//We use n to show the H-number 4n+1 and the maxinum of n is 250000
int isprime[250001];//We Mark H-primes with 0, H-semi-primes with 1 and the others with -1
int main()
{
	for(long i=1;i<250001;i++)//Initialize the isprime array
		isprime[i]=0;
	for(long i=1;i<250001;i++)//Enumerate every pair of H-numbers
		for(long j=1;j<250001;j++)
		{
			long k=4*i*j+i+j;//(4i+1)(4j+1)=4(4i*j+i+j)+1
			if(k>250000)//To avoid overlimit
				break;
			if(isprime[i]==0 && isprime[j]==0)//Judge if it is a H-semi-prime
				isprime[k]=1;
			else
				isprime[k]=-1;
		}
	ans[0]=0;//Count the number of H-semi-primes from 1 to 4n+1
	for(long i=1;i<250001;i++)
		if(isprime[i]==1)
			ans[i]=ans[i-1]+1;
		else
			ans[i]=ans[i-1];
	long n;//Read n and print the answer as feedback
	scanf("%ld",&n);
	while(n!=0)
	{
		printf("%ld %ld\n",n,ans[(n-1)/4]);
		scanf("%ld",&n);
	}
	return 0;
}
