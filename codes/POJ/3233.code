var
	matrix,answer,multi,power,sum,temp:array[1..50,1..50]of int64;
	n,m,i,j,c:integer;
	k:longint;
begin
	read(n,k,m);
	for i:=1 to n do//Read the matrix A
		for j:=1 to n do
			begin
				read(matrix[i,j]);
				matrix[i,j]:=matrix[i,j] mod m;
			end;
	power:=matrix;//Initialize the 2^0 times of the matrix A, which is the matrix A
	sum:=matrix;//Initialize the sum of the first 2^0 times of the matrix A, which is the matrix A too
	fillchar(answer,sizeof(answer),0);//Initialize the answer matrix, which is the zero matrix
	fillchar(multi,sizeof(multi),0);//Initialize the multi matrix to the identity matrix
	for i:=1 to n do
		multi[i,i]:=1;
	while k>0 do//Conver k into binary
		begin
			if k mod 2=1 then
				begin
					for i:=1 to n do//Add the product of the sum and the multiplier to the answer
						for j:=1 to n do
							for c:=1 to n do
								answer[i,j]:=(multi[i,c]*sum[c,j]+answer[i,j]) mod m;
					fillchar(temp,sizeof(temp),0);//Update the multiplier
					for i:=1 to n do
						for j:=1 to n do
							for c:=1 to n do
								temp[i,j]:=(multi[i,c]*power[c,j]+temp[i,j]) mod m ;
					multi:=temp;
				end;
			temp:=sum;//Update the sum
			for i:=1 to n do
				for j:=1 to n do
					for c:=1 to n do
						temp[i,j]:=(sum[i,c]*power[c,j]+temp[i,j]) mod m;
			sum:=temp;
			fillchar(temp,sizeof(temp),0);//Update the power
			for i:=1 to n do
				for j:=1 to n do
					for c:=1 to n do
						temp[i,j]:=(power[i,c]*power[c,j]+temp[i,j]) mod m;
			power:=temp;
			k:=k div 2;
		end;
	for i:=1 to n do
		begin
			for j:=1 to n do
				write(answer[i,j],' ');
			writeln;
		end;
end.

#include<cstdio>
#include<cstring>//We need to use the memset function and the memcpy function in cstring
long long matrix[30][30],answer[30][30],multi[30][30],power[30][30],sum[30][30],temp[30][30];
int main()
{
	int n,m;
	long k;
	scanf("%d%ld%d",&n,&k,&m);
	for(int i=0;i<n;i++)//Read the matrix A
		for(int j=0;j<n;j++)
		{
			scanf("%lld",&matrix[i][j]);
			matrix[i][j]=matrix[i][j]%m;
		}
	memcpy(power,matrix,sizeof power);//Initialize the 2^0 times of the matrix A, which is the matrix A
	memcpy(sum,matrix,sizeof sum);//Initialize the sum of the first 2^0 times of the matrix A, which is the matrix A too
	memset(answer,0,sizeof answer);//Initialize the answer matrix, which is the zero matrix
	memset(multi,0,sizeof multi);//Initialize the multi matrix to the identity matrix
	for(int i=0;i<n;i++)
		multi[i][i]=1;
	for(;k>0;k/=2)//Conver k into binary
	{
		if(k%2==1)
		{
			for(int i=0;i<n;i++)//Add the product of the sum and the multiplier to the answer
				for(int j=0;j<n;j++)
					for(int c=0;c<n;c++)
						answer[i][j]=(multi[i][c]*sum[c][j]+answer[i][j])%m;
			memset(temp,0,sizeof temp);//Update the multiplier
			for(int i=0;i<n;i++)
				for(int j=0;j<n;j++)
					for(int c=0;c<n;c++)
						temp[i][j]=(multi[i][c]*power[c][j]+temp[i][j])%m;
			memcpy(multi,temp,sizeof multi);
		}
		memcpy(temp,sum,sizeof temp);//Update the sum
		for(int i=0;i<n;i++)
			for(int j=0;j<n;j++)
				for(int c=0;c<n;c++)
					temp[i][j]=(sum[i][c]*power[c][j]+temp[i][j])%m;
		memcpy(sum,temp,sizeof sum);
		memset(temp,0,sizeof temp);//Update the power
		for(int i=0;i<n;i++)
			for(int j=0;j<n;j++)
				for(int c=0;c<n;c++)
					temp[i][j]=(power[i][c]*power[c][j]+temp[i][j])%m;
		memcpy(power,temp,sizeof power);
	}
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
			printf("%lld ",answer[i][j]);
		putchar('\n');
	}
	return 0;
}