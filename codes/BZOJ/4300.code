var
	dp:array[0..31]of longint;
	n,ans,max,a,i,j:longint;
begin
	ans:=0;
	for j:=0 to 31 do// Initialize the dp array
		dp[j]:=0;
	read(n);
	for i:=1 to n do
		begin
			max:=0;
			read(a);
			for j:=0 to 31 do
				if (a and (1 shl j)<>0) and (max<dp[j]) then// Find the length of the longest subsequence that a[i] can append
					max:=dp[j];
			inc(max);
			for j:=0 to 31 do
				if (a and (1 shl j)<>0) and (dp[j]<max) then// Update the dp array
					begin
						dp[j]:=max;
						if ans<dp[j] then// Update the answer
							ans:=dp[j];
					end;
		end;
	write(ans);
end.

#include<cstdio>
using namespace std;
long dp[32];
int main()
{
	long n,ans=0;
	for(long j=0;j<32;j++)// Initialize the dp array
		dp[j]=0;
	scanf("%ld",&n);
	for(long i=0;i<n;i++)
	{
		long a,max=0;
		scanf("%ld",&a);
		for(long j=0;j<32;j++)
			if((a&(1<<j))!=0 && max<dp[j])// Find the length of the longest subsequence that a[i] can append
				max=dp[j];
		max++;
		for(long j=0;j<32;j++)
			if((a&(1<<j))!=0 && dp[j]<max)// Update the dp array
			{
				dp[j]=max;
				if(ans<dp[j])// Update the answer
					ans=dp[j];
			}
	}
	printf("%ld",ans);
	return 0;
}
