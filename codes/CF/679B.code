var
	h:integer;
	a:longint;
	m,x:int64;
function cube(a:longint):int64;
begin
	exit(int64(a)*a*a);
end;
function count(m:int64):integer;//Count how many blocks can be added at most
var
	a:longint;
begin
	if m<8 then
		exit(m);
	a:=1;
	while cube(a+1)<=m do
		inc(a);
	if cube(a)-1-cube(a-1)>m-cube(a) then//Choose the situation with the maximum volume remained
		exit(1+count(cube(a)-1-cube(a-1)));
	else
		exit(1+count(m-cube(a)))
end;
begin
	read(m);
	h:=0;
	x:=0;
	while m>0 do//m is the volume remained
		begin
			inc(h);
			a:=1;//find the biggest cube
			while cube(a+1)<=m do
				inc(a);
			if count(cube(a)-1-cube(a-1))>count(m-cube(a)) then//Choose the tallest solution
				begin
					m:=cube(a)-1-cube(a-1);
					x:=x+cube(a-1);
				end
			else
				begin
					m:=m-cube(a);
					x:=x+cube(a);
				end;
		end;
	write(h,' ',x);
end.

#include<cstdio>
long long cube(long a)
{
	return (long long)a*a*a;
}
int count(long long m)//Count how many blocks can be added at most
{
	if(m<8)
		return m;
	long a=1;
	while(cube(a+1)<=m)
		a++;
	if(cube(a)-1-cube(a-1)>m-cube(a))//Choose the situation with the maximum volume remained
		return 1+count(cube(a)-1-cube(a-1));
	else
		return 1+count(m-cube(a));
}
int main()
{
	long long m;
	scanf("%lld",&m);
	int h=0;
	long long x=0;
	while(m>0)//m is the volume remained
	{
		h++;
		long a=1;//find the biggest cube
		while(cube(a+1)<=m)
			a++;
		if(count(cube(a)-1-cube(a-1))>count(m-cube(a)))//Choose the tallest solution
		{
			m=cube(a)-1-cube(a-1);
			x+=cube(a-1);
		}
		else
		{
			m-=cube(a);
			x+=cube(a);
		}
	}
	printf("%d %lld\n",h,x);
	return 0;
}