var
	field:array[0..101,0..101]of char;//Make the minefield a little larger to avoid the subscript out of range
	n,m,i,j,count:integer;
begin
	for i:=0 to 101 do//Initialize the minefield
		for j:=0 to 101 do
			field[i,j]:='?';
	readln(n,m);
	for i:=1 to n do
		for j:=1 to m do
			if j<m then//This is to avoid the problem that the char enter and the char return might bring
				read(field[i,j])
			else
				readln(field[i,j]);
	for i:=1 to n do//Scan the minefield
		begin
			for j:=1 to m do
				if field[i,j]<>'*' then
					begin
						count:=0;
						if field[i-1,j-1]='*' then
							inc(count);
						if field[i-1,j]='*' then
							inc(count);
						if field[i-1,j+1]='*' then
							inc(count);
						if field[i,j-1]='*' then
							inc(count);
						if field[i,j+1]='*' then
							inc(count);
						if field[i+1,j-1]='*' then
							inc(count);
						if field[i+1,j]='*' then
							inc(count);
						if field[i+1,j+1]='*' then
							inc(count);
						write(count)
					end
				else
					write('*');
			writeln;
		end;
end.

#include<cstdio>
char field[102][102];//Make the minefield a liitle larger to avoid the subscript out of range
int main()
{
	for(int i=0;i<102;i++)//Initialize the minefield
		for(int j=0;j<102;j++)
			field[i][j]='?';
	int n,m;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
	{
		scanf("%s",&field[i]);//There may be some problems if we use scanf("%c",&field[i][j]) or getchar() because of the char enter and the char return, so instead we use a different way here
		for(int j=101;j>0;j--)
			field[i][j]=field[i][j-1];
		field[i][0]='?';
	}
	for(int i=1;i<=n;i++)//Scan the minefield
	{
		for(int j=1;j<=m;j++)
			if(field[i][j]!='*')
			{
				int count=0;
				if(field[i-1][j-1]=='*')
					count++;
				if(field[i-1][j]=='*')
					count++;
				if(field[i-1][j+1]=='*')
					count++;
				if(field[i][j-1]=='*')
					count++;
				if(field[i][j+1]=='*')
					count++;
				if(field[i+1][j-1]=='*')
					count++;
				if(field[i+1][j]=='*')
					count++;
				if(field[i+1][j+1]=='*')
					count++;
				printf("%d",count);
			}
			else
				printf("*");
		printf("\n");
	}
	return 0;
}