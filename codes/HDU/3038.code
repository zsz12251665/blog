var
	f:array[0..200000]of longint;
	d:array[0..200000]of int64;// d[i] is the difference of the prefix sum to the i-th and the prefix sum to the f[i]-th
	n,m,a,b,s,i,ans:longint;
function find(p:longint):longint;
var
	fp:longint;
begin
	if f[p]=p then
		exit(p);
	fp:=find(f[p]);
	d[p]:=d[p]+d[f[p]];
	f[p]:=fp;
	exit(f[p]);
end;
function merge(a,b,s:longint):boolean;
var
	fa,fb:longint;
begin
	fa:=find(a);
	fb:=find(b);
	if fa=fb then// The relationship is clear
		exit(d[b]-d[a]<>s);// Find a wrong answer
	d[fb]:=s+d[a]-d[b];
	f[fb]:=fa;
	exit(false);
end;
begin
	while not eof(input) do
		begin
			read(n,m);
			for i:=0 to n do// Initialize the union find set and the difference
				begin
					f[i]:=i;
					d[i]:=0;
				end;
			ans:=0;
			for i:=1 to m do
				begin
					read(a,b,s);
					if merge(a-1,b,s) then
						inc(ans);
				end;
			writeln(ans);
		end;
end.

#include<cstdio>
using namespace std;
long f[200001];
long long d[200001];// d[i] is the difference of the prefix sum to the i-th and the prefix sum to the f[i]-th
long find(long p)
{
	if(f[p]==p)
		return p;
	long fp=find(f[p]);
	d[p]+=d[f[p]];
	return f[p]=fp;
}
bool merge(long a,long b,long s)
{
	long fa=find(a),fb=find(b);
	if(fa==fb)// The relationship is clear
		return d[b]-d[a]!=s;// Find a wrong answer
	d[fb]=s+d[a]-d[b];
	f[fb]=fa;
	return false;
}
int main()
{
	for(long n,m;scanf("%ld%ld",&n,&m)!=EOF;)
	{
		for(long i=0;i<=n;++i)// Initialize the union find set and the difference
		{
			f[i]=i;
			d[i]=0;
		}
		long ans=0;
		for(long i=0,a,b,s;i<m;++i)
		{
			scanf("%ld%ld%ld",&a,&b,&s);
			ans+=merge(a-1,b,s)?1:0;
		}
		printf("%ld\n",ans);
	}
	return 0;
}
