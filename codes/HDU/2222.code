var
	s:ansistring;
	next:array[0..500000,1..26]of longint;
	fail,last:array[0..500000]of longint;
	queue:array[1..500000]of longint;
	value:array[0..500000]of integer;
	t,ti,n,ans:integer;
	size,head,foot,p,i,tmp:longint;
begin
	readln(t);
	for ti:=1 to t do
		begin
			fillchar(next,sizeof(next),0);//Initialize the arrays
			fillchar(fail,sizeof(fail),0);
			fillchar(last,sizeof(last),0);
			fillchar(value,sizeof(value),0);
			ans:=0;
			readln(n);
			size:=0;//Build the trie
			for tmp:=1 to n do
				begin
					p:=0;
					readln(s);
					for i:=1 to length(s) do
						if next[p,ord(s[i])-96]=0 then
							begin
								inc(size);
								next[p,ord(s[i])-96]:=size;
								p:=next[p,ord(s[i])-96];
							end
						else
							p:=next[p,ord(s[i])-96];
					inc(value[p]);
				end;
			queue[1]:=0;//Build the fail array
			head:=1;
			foot:=2;
			while head<>foot do
				begin
					p:=queue[head];
					inc(head);
					for i:=1 to 26 do
						begin
							if next[p,i]<>0 then
								begin
									queue[foot]:=next[p,i];
									inc(foot);
									if p=0 then
										continue;
									tmp:=fail[p];//If they are not matched, jump to the last match
									while (tmp>0) and (next[tmp,i]=0) do
										tmp:=fail[tmp];
									fail[next[p,i]]:=next[tmp,i];
									if value[next[tmp,i]]=0 then//last is the last node of an model string
										last[next[p,i]]:=last[next[tmp,i]]
									else
										last[next[p,i]]:=next[tmp,i];
								end
							else
								next[p,i]:=fail[p];
						end;
				end;
			readln(s);
			for i:=1 to length(s) do//Scan the question string to find the model strings
				begin
					while (p<>0) and (next[p,ord(s[i])-96]=fail[p]) do//If they are not matched, jump to the last match
						p:=fail[p];
					p:=next[p,ord(s[i])-96];
					tmp:=p;//Jump back to find out all model strings available
					while tmp<>0 do
						begin
							ans:=ans+value[tmp];
							value[tmp]:=0;
							tmp:=last[tmp];
						end;
				end;
			writeln(ans);
		end;
end.

#include<cstdio>
#include<cstring>//We need to use the memset function and the strlen function in cstring
long next[500000][26],fail[500000],last[500000],queue[500000];
int value[500000];
char s[1000000];
int main()
{
	int t;
	for(scanf("%d",&t);t>0;t--)
	{
		memset(next,0,sizeof next);//Initialize the arrays
		memset(fail,0,sizeof fail);
		memset(last,0,sizeof last);
		memset(value,0,sizeof value);
		int n,ans=0;
		scanf("%d",&n);
		for(long size=0;n>0;n--)//Build the trie
		{
			long p=0;
			scanf("%s",&s);
			for(int i=0,len=strlen(s);i<len;i++)
			{
				if(next[p][s[i]-'a']==0)
					next[p][s[i]-'a']=++size;
				p=next[p][s[i]-'a'];
			}
			value[p]++;
		}
		queue[0]=0;//Build the fail array
		for(long head=0,foot=1;head!=foot;)
		{
			long p=queue[head++];
			for(int i=0;i<26;i++)
				if(next[p][i]!=0)
				{
					queue[foot++]=next[p][i];
					if(p==0)
						continue;
					long tmp=fail[p];//If they are not matched, jump to the last match
					while(tmp>0 && next[tmp][i]==0)
						tmp=fail[tmp];
					fail[next[p][i]]=next[tmp][i];
					if(value[next[tmp][i]]==0)//last is the last node of an model string
						last[next[p][i]]=last[next[tmp][i]];
					else
						last[next[p][i]]=next[tmp][i];
				}
				else
					next[p][i]=fail[p];
		}
		scanf("%s",&s);
		for(long i=0,p=0,len=strlen(s);i<len;i++)//Scan the question string to find the model strings
		{
			while(p!=0 && next[p][s[i]-'a']==fail[p])//If they are not matched, jump to the last match
				p=fail[p];
			p=next[p][s[i]-'a'];
			for(long tmp=p;tmp!=0;tmp=last[tmp])//Jump back to find out all model strings available
			{
				ans+=value[tmp];
				value[tmp]=0;
			}
		}
		printf("%d\n",ans);
	}
	return 0;
}
