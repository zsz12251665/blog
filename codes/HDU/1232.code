var
	uset:array[1..1000]of integer;//The uset array is the merge-find set
	count:array[1..1000]of boolean;
	n,m,sum,i,a,b:integer;
function find(a:integer):integer;
begin
	if uset[a]<>a then
		uset[a]:=find(uset[a]);
	exit(uset[a]);
end;
begin
	read(n);
	while n<>0 do
		begin
			read(m);
			sum:=0;
			for i:=1 to n do//Initialize the arrays
				begin
					uset[i]:=i;
					count[i]:=false;
				end;
			for i:=1 to m do
				begin
					read(a,b);
					uset[find(a)]:=find(b);//Union the sets
				end;
			for i:=1 to n do//Count the number of the tables
				if not count[find(i)] then
					begin
						count[find(i)]:=true;
						inc(sum);
					end;
			writeln(sum-1);
			read(n);
		end;
end.

#include<cstdio>
int uset[1000];//The uset array is the merge-find set
bool count[1000];
int find(int a)
{
	if(uset[a]!=a)
		uset[a]=find(uset[a]);
	return uset[a];
}
int main()
{
	int n,m,sum;
	for(scanf("%d",&n);n!=0;scanf("%d",&n))
	{
		scanf("%d",&m);
		sum=0;
		for(int i=0;i<n;i++)//Initialize the arrays
		{
			uset[i]=i;
			count[i]=false;
		}
		for(int i=0,a,b;i<m;i++)
		{
			scanf("%d%d",&a,&b);
			uset[find(a-1)]=find(b-1);//Union the sets
		}
		for(int i=0;i<n;i++)//Count the number of the tables
			if(!count[find(i)])
			{
				count[find(i)]=true;
				sum++;
			}
		printf("%d\n",sum-1);
	}
	return 0;
}